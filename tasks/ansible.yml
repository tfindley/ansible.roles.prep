---
# tasks file for ansible-prep

# First we need to creat the Ansible user account that we will use on future runs of Ansible.
# This account needs to exist on Target systems, not on the Control system.
- name: Ansible-Prep.Ansible - Add user for Ansible control user
  user:
    name: "{{ ansible_usr }}"         # Set this variable in your Playbook
    password: "{{ ansible_pwd }}"     # Set this variable in your Playbook
    shell: /bin/bash
    groups: "{{ sudo_grp }}"          # This variable is set in var/context - the default sudo groups for each OS family
    append: yes
    state: present                  # Tell the system that the account should be present
    update_password: on_create      # Ensures we don't overwrite the password of the Ansible user account


# We cannot use a password when accessing the Ansible user due to timeouts 
# and it just being a pain-in-the-ass to enter a password for every system
# so we use an SSH RSA keypair. see the following command: $ ssh-keygen
- name: Ansible-Prep.Ansible - Add authorized key for Ansible user
  authorized_key:
    user: "{{ ansible_usr }}"         # Set this variable in your Playbook
    state: present                  # This is the Public key that you just generated using $ ssh-keygen
    key: "{{ ansible_key }}"          # Set this variable in your Playbook

# This is used to obscure the ansible user account from any graphic user interface logon prompt.
# Even if we disable remote password authentication we can still log on locally.
# If the system is used in an Office/Lab or managed infrastructure environment we dont want to
# advertise the presence of this account to the system users.
- name: Ansible-Prep.Ansible - Define {{ ansible_usr }} as a system user on Ubuntu-based systems.
  copy:
    src: AccountsService
    dest: "/var/lib/AccountsService/users/{{ ansible_usr }}"
    owner: root
    group: root
    mode: 0644
  when: ansible_distribution == "Ubuntu"

# Roadmap
# -------
# Add support for CentOS to obscure the account from the GUI.